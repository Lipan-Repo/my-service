const { db,CustomerBillGeneration } = require('../../src/utils/dbUtil')
const app = require('../../loanservice')
const request = require('supertest')
const { beforeAllFN, afterAllFN } = require('../helpers/helpers')



const {CustomerCreditProfile}=require('../../src/utils/dbUtil')
describe('check the api request of loanroute', () => {
    beforeAllFN(db)
    it('/billGeneration/:customerId/', async () => {
        let response = await request(app).get('/loan-service/api/v1/billGeneration/300712/')
        expect(response.statusCode).toBe(200)
        expect(typeof response.body).toEqual('object')
        expect(response.body).toHaveProperty("statementResponse")
        expect(response.body.statementResponse).toHaveProperty("statementDate")
        expect(response.body.statementResponse).toHaveProperty("paymentDueDate")
        expect(response.body.statementResponse.currentMonthStatementResponse).toHaveProperty("statementAmount")
        expect(response.body.statementResponse.currentMonthStatementResponse).toHaveProperty("overAllAmount")
        expect(response.body.statementResponse.currentMonthStatementResponse).toHaveProperty("advanceAmount")
        expect(response.body.statementResponse.currentMonthStatementResponse.statementAmount).toMatch(/0.00/)
        expect(response.body.statementResponse.creditSummary).toHaveProperty("openingCreditLimit")
        expect(response.body.statementResponse.creditSummary).toHaveProperty("drawdownDuringTheMonth")
        expect(response.body.statementResponse.creditSummary).toHaveProperty("paymentsByCustomer")
        expect(response.body.statementResponse.creditSummary).toHaveProperty("closingCreditLImit")
        expect(response.body.statementResponse).toHaveProperty("loanSummaryResponse")
        expect(response.body.statementResponse).toHaveProperty("totalSummary")
        expect(response.body.statementResponse).toHaveProperty("totalPenaltyAndFees")
        expect(response.body.statementResponse.overallSummary).toHaveProperty("totalEmis")
        expect(response.body.statementResponse.overallSummary).toHaveProperty("payments")
        expect(response.body.statementResponse.overallSummary).toHaveProperty("penaltyAndFees")
        expect(response.body.statementResponse.overallSummary).toHaveProperty("statementTotal")
        //const customerCreditProfileTabel = await CustomerBillGeneration.findAll({where:{customerId:300712}})
        //console.log(customerCreditProfileTabel);
       
    })
    it('/billGeneration/pdf/:customerId/ ', async () => {
        let response = await request(app).get('/loan-service/api/v1/billGeneration/pdf/?customerId=300712')
        expect(response.statusCode).toBe(200)
        expect(typeof response.body).toEqual('object')
        expect(response.body).toHaveProperty("statementResponse")
        expect(response.body.statementResponse).toHaveProperty("statementDate")
        expect(response.body.statementResponse).toHaveProperty("paymentDueDate")
        expect(response.body.statementResponse.currentMonthStatementResponse).toHaveProperty("statementAmount")
        expect(response.body.statementResponse.currentMonthStatementResponse).toHaveProperty("overAllAmount")
        expect(response.body.statementResponse.currentMonthStatementResponse).toHaveProperty("advanceAmount")
        expect(response.body.statementResponse.currentMonthStatementResponse.statementAmount).toMatch(/0.00/)
        expect(response.body.statementResponse.creditSummary).toHaveProperty("openingCreditLimit")
        expect(response.body.statementResponse.creditSummary).toHaveProperty("drawdownDuringTheMonth")
        expect(response.body.statementResponse.creditSummary).toHaveProperty("paymentsByCustomer")
        expect(response.body.statementResponse.creditSummary).toHaveProperty("closingCreditLImit")
        expect(response.body.statementResponse).toHaveProperty("loanSummaryResponse")
        expect(response.body.statementResponse).toHaveProperty("totalSummary")
        expect(response.body.statementResponse).toHaveProperty("totalPenaltyAndFees")
        expect(response.body.statementResponse.overallSummary).toHaveProperty("totalEmis")
        expect(response.body.statementResponse.overallSummary).toHaveProperty("payments")
        expect(response.body.statementResponse.overallSummary).toHaveProperty("penaltyAndFees")
        expect(response.body.statementResponse.overallSummary).toHaveProperty("statementTotal")
    })
    it('/getStatement/pdf/:customerId/:year/:month internal server err', async () => {
        let response = await request(app).get('/loan-service/api/v1/getStatement/pdf/300712/2023/january')
        expect(response.body.status).toBe('failed')
        expect(response.statusCode).toBe(500)
    })
    it('/getStatement/:customerId/:year/:month', async () => {
        let response = await request(app).get('/loan-service/api/v1/getStatement/300712/2023/january')
        expect(response.body).toEqual(expect.any(Array))
        expect(response.statusCode).toBe(200)
        
    })
    afterAllFN(db)
})